<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 컨트롤러 매핑 설정 
	 예) @Controller, @RequestMapping와 같은 애너테이션을 사용할 때 필요한 빈 객체들을 자동으로 등록-->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 정적자원들 설정(이미지들,css파일,js파일들) 
	     mapping="/resources/**"  실제web문서상의 소스부분
	     location="/resources/"   정적자원들이 위치하는 경로  -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- view설정 
		 - 컨트롤러에서 설정한 view이름으로  실제 사용할 뷰를 선택하는 ViewResolver객체를 설정
		   prefix+view명+suffix
		 - 예) 컨트롤러에서 설정한 view이름이 "home"이라면
		 	   prefix+view명+suffix  -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- Controller파일의 위치를 설정 -->
	<!-- 참고   component-scan요소가 자동으로 인식하는 애너테이션
		 @Controller : Controller역할
		 @Service : Service역할
		 @Repository : DB작업 
		 @Required : 필수 property임을 명시
		 @Autowired: 의존관계 설정시 사용. 객체를 자동 주입. Spring 종속 애너테이션.org.springframework.beans.factory.annotation.Autowired
		 @Inject : @Autowired와 유사. Spring에 종속적이지 않는 애너테이션. javax.inject.Inject 
	-->
	<context:component-scan base-package="com.mycom.*" />
	
	<!--기본생성자를 이용한 bean객체 생성 -->
	<!-- bean요소
		class="패키지명.클래스명"
		id="id명(다른 빈과 구분하는용도)" -->
	<!-- com.mycom.app.emp.service.EmpService empService => new EmpServiceImpl(); -->
	<beans:bean class="com.mycom.app.emp.service.EmpServiceImpl" id="empService"/>
	<!-- private com.mycom.app.emp.repository.EmpDAOImpl empDAO = new EmpDAOImpl(); -->
	<beans:bean class="com.mycom.app.emp.repository.EmpDAOImpl" id="empDAO"/>
	
	 <!-- 인터셉터(클래스)bean 등록 -->
	
	<interceptors>
		<!-- <beans:bean class="com.mycom.app.interceptor.ExInterceptor"></beans:bean> -->
		<beans:bean class="com.mycom.app.interceptor.MonitoringInterceptor"></beans:bean>
	</interceptors>
	
	<!-- 데이터베이스 환경설정 -->
	<!-- <beans:bean id="dataSource"  이코드는 절대 변경하면 안된다. -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
       <beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>  
       <beans:property name="url" value="jdbc:mysql://localhost:3306/spdb?serverTimezone=UTC&amp;characterEncoding=utf8"/> 
       <beans:property name="username" value="spuser"/> 
       <beans:property name="password" value="sppw"/>  
   </beans:bean>

   <beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
       <beans:property name="dataSource" ref="dataSource"/>
   </beans:bean>  
   
<!--    
	JdbcTemplate  : 스프링이 제공하는 JdbcTemplate을 사용
       장점 : 1.간단한 설정
       2.JdbcTemplate은 템플릿 콜백 패턴을 사용해서, JDBC를 직접 사용할 때 발생하는 대부분의 반복 작업을 처리해준다. 
      개발자는 SQL을 작성하고, 전달할 파라미터 정의 + 응답 값 매핑만 하면 됨. 
      아래 반복 작업을 대신해줌.
      커넥션 획득
      statement를 준비하고 실행
      결과를 반복하도록 루프를 실행
      Connetion, Statement, ResultSet 종료
      트랜잭션을 위한 Connection 동기화
      예외 발생 시, 스프링 예외 변환기 실행
      
      가장 간단하게 SQL을 사용하기 위해서는 JdbcTemplate을 사용하면 됨. 
      JdbcTemplate의 최대 단점은 동적 쿼리 작성 문제를 해결하지 못한다. 이 부분은 굉장히 번거롭다.
      동적 쿼리 작성을 해결하기 위해 MyBatis 사용.
      
   JDBC 단점
      동적 SQL을 해결하기 어렵다. 
      동적 SQL은 MyBatis이용해서 처리할 수 있다.  
   
   JDBC 주요 메서드
      update() : insert,update,delete쿼리실행
      query() : select쿼리실행. 다중행 조회. 실행 결과가 List 형태로 반환됨. 
      queryForObject : 단일행조회. 실행 결과는 하나의 객체만 반환됨. 
    
   * DataSource객체가 필요한 이유 
   	- 스프링 JDBC가 JDBC API를 사용하여 DB에 접속하려면 
   		-> 드라이버로딩 -> DB에 접속하여 -> 커넥션 객체를 받아와야 한다. 
   		따라서 dataSource를 DB에 연결해야 하기 때문에 DataSource객체를 bean으로 등록해야 한다.  

	DAO에서는 아래와 같이 코드를 작성해야한다.
   private jdbcTemplate jdbcTemplate;
   
   @AutoWired
   public void setDataSource(DataSourece dataSourece){
   this.jdbcTemplate = new jdbcTemplate(dataSource);
   } -->
	
</beans:beans>
